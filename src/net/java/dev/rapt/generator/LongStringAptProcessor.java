/*
Copyright (c) 2004, Bruce Chapman
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation and/or
    other materials provided with the distribution.
    * Neither the name of the Rapt Library nor the names of its contributors may be
    used to endorse or promote products derived from this software without specific
    prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.
*/

package net.java.dev.rapt.generator;

import com.sun.mirror.apt.*;
import com.sun.mirror.declaration.*;
import java.io.*;
import java.util.*;

class LongStringAptProcessor implements AnnotationProcessor {

    AnnotationProcessorEnvironment env;

    LongStringAptProcessor(AnnotationProcessorEnvironment env) {
        this.env = env;
    }
    
    public void process() {
        final AnnotationTypeDeclaration ann =
            (AnnotationTypeDeclaration)env.getTypeDeclaration("net.java.dev.rapt.generator.LongString");
        // put all @LongString tagged declarations
        // into a Map<PackageDeclaration,Map<String,List<Declaration>>>
        // Where the String key in the inner map is the field name of the annotation target
        Map<PackageDeclaration,Map<String,List<FieldDeclaration>>> perPackage =
            new HashMap<PackageDeclaration,Map<String,List<FieldDeclaration>>>();
        for(Declaration d : env.getDeclarationsAnnotatedWith(ann)) {
            PackageDeclaration pd = null;
            if(d instanceof FieldDeclaration) {
                FieldDeclaration fd = (FieldDeclaration)d;
                String fname = fd.getSimpleName();
                // check we have javadocs for this field
                if(fd.getDocComment() == null) {
                    env.getMessager().printError(
                        fd.getPosition(),
                        "@LongString's processor: Field " + fname +
                        " must have a javadoc comment");
                } else {
                    pd = ((MemberDeclaration)d).getDeclaringType().getPackage();
                    if(! perPackage.containsKey(pd)) {
                        perPackage.put(pd,new HashMap<String,List<FieldDeclaration>>());
                    }
                    if(! perPackage.get(pd).containsKey(fname)) {
                        perPackage.get(pd).put(fname, new ArrayList<FieldDeclaration>());
                    }
                    perPackage.get(pd).get(fname).add(fd);
                }
            } else {
                env.getMessager().printError("Internal error, should not have found @LongString on " + d);
                continue;
            }
        }

        // now that we have all @LongString fields in perPackage, generate the LongStrings class
        // for each package needing one.
        for(PackageDeclaration pd : perPackage.keySet()) {
            // Build the source for LongStrings checking each Annotation target for being static String type
            String pkg = pd.getQualifiedName();
            String sourceName =  pkg;
            if(sourceName.equals("")) {
                sourceName = "LongStrings";
            } else {
                sourceName = sourceName + ".LongStrings";
            }
            try {
                PrintWriter out = env.getFiler().createSourceFile(sourceName);
                if(! pkg.equals("")) out.println("package " + pkg + ";" );
                out.println("// This source file is generated by @LongString's Apt Processor" );
                out.println("class LongStrings {");
                out.println("    private static String separator = System.getProperty(\"line.separator\");");
                for(String fname : perPackage.get(pd).keySet()) {
                    out.println("    static final String " + fname + "() {" );
                    for(FieldDeclaration fd : perPackage.get(pd).get(fname)) {
                        String declaringClass = fd.getDeclaringType().getQualifiedName();
                        out.println("        if(callerIs(" + declaringClass + ".class)) {");
                        out.println("            return \"" + escape(fd.getDocComment()) + "\";" );
                        out.println("        }" );
                    }
                    out.println("        throw new IllegalStateException(\"Not called from a class that declares this LongString\");" );
                    out.println("    }" );
                }
                out.println("    protected static boolean callerIs(Class requiredCaller) {");
                out.println("        StackTraceElement[] trace = new Throwable().getStackTrace();");
                    // [0] is new Throwable, [1] where LongString called callerIs()
                    // [2] is where The LongString is being retreived from
                out.println("        String actualCaller = trace[2].getClassName();");
                out.println("        return actualCaller.equals(requiredCaller.getName());");
                out.println("    }");
                out.println("}");
                out.close();
            } catch (IOException ioe) {
                env.getMessager().printError("LongStringAptProcessor Internal IO error " + ioe);
            }
        }
    }

    private static String escapedNewline = "\" + separator " + "\r\n                 + \"";
    
    /**
    Escape a multi line string into one that can be use as a string literal in
    a java source file after adding quotes at each end.
    */
    private String escape(String raw) {
        String rslt;
        rslt = raw.replace("\"","\\\""); // escape quotes  " -> \"
        // escape any form of newline to concatenate a runtime newline separator into
        // the value
        rslt = rslt.replace("\r\n",escapedNewline);
        rslt = rslt.replace("\r",escapedNewline);
        rslt = rslt.replace("\n",escapedNewline);
        return rslt;
    }
}
